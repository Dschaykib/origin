% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/originize_dir.R
\name{originize_dir}
\alias{originize_dir}
\title{Add Explicit Package Names to its Functions}
\usage{
originize_dir(
  path = ".",
  pkgs = getOption("origin.pkgs", .packages()),
  recursive = TRUE,
  files_pattern = "\\\\.R$",
  ignore_case = TRUE,
  exclude_files = NULL,
  overwrite = getOption("origin.overwrite", TRUE),
  ask_before_applying_changes = getOption("origin.ask_before_applying_changes", TRUE),
  ignore_comments = getOption("origin.ignore_comments", TRUE),
  check_conflicts = getOption("origin.check_conflicts", TRUE),
  check_base_conflicts = getOption("origin.check_base_conflicts", TRUE),
  add_base_packages = getOption("origin.add_base_packages", FALSE),
  excluded_functions = getOption("origin.excluded_functions", list()),
  verbose = getOption("origin.verbose", FALSE),
  use_markers = getOption("origin.use_markers_for_logging", TRUE),
  check_local_funs = getOption("origin.check_local_funs", TRUE)
)
}
\arguments{
\item{path}{path to a directory}

\item{pkgs}{a character vector with package names}

\item{recursive}{logical. Should the listing recurse into directories?
See \link[base]{list.files}}

\item{files_pattern}{A regular expression. Only file names which match the
regular expression will be returned. See \link[base]{list.files}}

\item{ignore_case}{logical. Should pattern-matching be case-insensitive?
See \link[base]{list.files}}

\item{exclude_files}{list of files to be excluded}

\item{overwrite}{a boolean, if TRUE the file will be saved and overwritten.
If FALSE the file is returned.}

\item{ask_before_applying_changes}{a boolean. If TRUE, the user has to approve
changes made by origin prior to applying them}

\item{ignore_comments}{a boolean, if TRUE lines starting with # are ignored}

\item{check_conflicts}{a boolean. If TRUE, possible namespace conflicts are
checked and, if there are any, user input is required. See also}

\item{check_base_conflicts}{a boolean. If TRUE; base R functions are also
included in checking for conflicts}

\item{add_base_packages}{a boolean. If TRUE, base R functions are handled
like all other packages and added via `::`}

\item{excluded_functions}{a list. Either an unnamed list of function names
as strings. Then these functions are excluded from all packages and never 
considered in origin. Or a named list with character vectors, Then 
the name of the list element refers to a package and the given functions 
are only excluded from this package. A very explicit way to handle
namespace conflicts}

\item{verbose}{a boolean. If TRUE, origin provides feedback about its steps.}

\item{use_markers}{a boolean. If TRUE, the markers tab inn RStudio is used
to track changes and show issues. FALSE prints the same information in
the console.}

\item{check_local_funs}{a boolean. If TRUE, it is checked whether locally
defined functions inside of the project mask exported functions from checked
packages. It avoids mistakenly adding pkg:: to a custom local function.}
}
\description{
Add Explicit Package Names to its Functions
}
